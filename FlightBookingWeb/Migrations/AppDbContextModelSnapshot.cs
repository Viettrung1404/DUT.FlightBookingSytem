// <auto-generated />
using System;
using FlightBookingWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightBookingWeb.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlightBookingWeb.Models.Account", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AccountID");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Role")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AccountId")
                        .HasName("PK__Account__349DA586A6D1DBBF");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("FlightBookingWeb.Models.Airplane", b =>
                {
                    b.Property<string>("AirplaneId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("AirplaneID");

                    b.Property<string>("AirplaneName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AirplaneType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("EconomySeats")
                        .HasColumnType("int");

                    b.Property<int?>("Vipseats")
                        .HasColumnType("int")
                        .HasColumnName("VIPSeats");

                    b.HasKey("AirplaneId")
                        .HasName("PK__Airplane__5ED76B855DCBD68E");

                    b.ToTable("Airplane", (string)null);
                });

            modelBuilder.Entity("FlightBookingWeb.Models.Airport", b =>
                {
                    b.Property<string>("AirportId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("AirportID");

                    b.Property<string>("AirportName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AirportId")
                        .HasName("PK__Airport__E3DBE08AA32C5FA3");

                    b.ToTable("Airport", (string)null);
                });

            modelBuilder.Entity("FlightBookingWeb.Models.Baggage", b =>
                {
                    b.Property<string>("BaggageId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BaggageID");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CustomerID");

                    b.Property<int?>("ExtraFee")
                        .HasColumnType("int");

                    b.Property<string>("TicketId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TicketID");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("BaggageId")
                        .HasName("PK__Baggage__01AFFC05C3619B0D");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TicketId");

                    b.ToTable("Baggage", (string)null);
                });

            modelBuilder.Entity("FlightBookingWeb.Models.Flight", b =>
                {
                    b.Property<string>("FlightId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("FlightID");

                    b.Property<string>("AirplaneId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("AirplaneID");

                    b.Property<TimeOnly?>("ArrivalTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("DepartureTime")
                        .HasColumnType("time");

                    b.Property<string>("RouteId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("RouteID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FlightId")
                        .HasName("PK__Flight__8A9E148E4510A9FB");

                    b.HasIndex("AirplaneId");

                    b.HasIndex("RouteId");

                    b.ToTable("Flight", (string)null);
                });

            modelBuilder.Entity("FlightBookingWeb.Models.FlightRoute", b =>
                {
                    b.Property<string>("RouteId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("RouteID");

                    b.Property<string>("ArrivalAirportId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ArrivalAirportID");

                    b.Property<string>("DepartureAirportId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("DepartureAirportID");

                    b.HasKey("RouteId")
                        .HasName("PK__FlightRo__80979AAD7B5C1658");

                    b.HasIndex("ArrivalAirportId");

                    b.HasIndex("DepartureAirportId");

                    b.ToTable("FlightRoute", (string)null);
                });

            modelBuilder.Entity("FlightBookingWeb.Models.Invoice", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("InvoiceID");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CustomerID");

                    b.Property<string>("IssueDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TicketId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TicketID");

                    b.HasKey("InvoiceId")
                        .HasName("PK__Invoice__D796AAD5B4BC4601");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TicketId");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("FlightBookingWeb.Models.MonthlyRevenue", b =>
                {
                    b.Property<string>("RevenueId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("RevenueID");

                    b.Property<int?>("Revenue")
                        .HasColumnType("int");

                    b.Property<int?>("TicketsSold")
                        .HasColumnType("int");

                    b.HasKey("RevenueId")
                        .HasName("PK__MonthlyR__275F173D5FA14C62");

                    b.ToTable("MonthlyRevenue", (string)null);
                });

            modelBuilder.Entity("FlightBookingWeb.Models.Ticket", b =>
                {
                    b.Property<string>("TicketId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TicketID");

                    b.Property<string>("ClassId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ClassID");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CustomerID");

                    b.Property<string>("FlightId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("FlightID");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<string>("SeatPosition")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TransitAirportId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("TransitAirportID");

                    b.HasKey("TicketId")
                        .HasName("PK__Ticket__712CC6278E67B49A");

                    b.HasIndex("ClassId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FlightId");

                    b.HasIndex("TransitAirportId");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("FlightBookingWeb.Models.TicketClass", b =>
                {
                    b.Property<string>("ClassId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ClassID");

                    b.Property<string>("ClassName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ClassId")
                        .HasName("PK__TicketCl__CB1927A0D61DE022");

                    b.ToTable("TicketClass", (string)null);
                });

            modelBuilder.Entity("FlightBookingWeb.Models.Baggage", b =>
                {
                    b.HasOne("FlightBookingWeb.Models.Account", "Customer")
                        .WithMany("Baggages")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Baggage__Custome__4CA06362");

                    b.HasOne("FlightBookingWeb.Models.Ticket", "Ticket")
                        .WithMany("Baggages")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK__Baggage__TicketI__4D94879B");

                    b.Navigation("Customer");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("FlightBookingWeb.Models.Flight", b =>
                {
                    b.HasOne("FlightBookingWeb.Models.Airplane", "Airplane")
                        .WithMany("Flights")
                        .HasForeignKey("AirplaneId")
                        .HasConstraintName("FK__Flight__Airplane__4222D4EF");

                    b.HasOne("FlightBookingWeb.Models.FlightRoute", "Route")
                        .WithMany("Flights")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK__Flight__RouteID__412EB0B6");

                    b.Navigation("Airplane");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("FlightBookingWeb.Models.FlightRoute", b =>
                {
                    b.HasOne("FlightBookingWeb.Models.Airport", "ArrivalAirport")
                        .WithMany("FlightRouteArrivalAirports")
                        .HasForeignKey("ArrivalAirportId")
                        .HasConstraintName("FK__FlightRou__Arriv__3C69FB99");

                    b.HasOne("FlightBookingWeb.Models.Airport", "DepartureAirport")
                        .WithMany("FlightRouteDepartureAirports")
                        .HasForeignKey("DepartureAirportId")
                        .HasConstraintName("FK__FlightRou__Depar__3B75D760");

                    b.Navigation("ArrivalAirport");

                    b.Navigation("DepartureAirport");
                });

            modelBuilder.Entity("FlightBookingWeb.Models.Invoice", b =>
                {
                    b.HasOne("FlightBookingWeb.Models.Account", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Invoice__Custome__5070F446");

                    b.HasOne("FlightBookingWeb.Models.Ticket", "Ticket")
                        .WithMany("Invoices")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK__Invoice__TicketI__5165187F");

                    b.Navigation("Customer");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("FlightBookingWeb.Models.Ticket", b =>
                {
                    b.HasOne("FlightBookingWeb.Models.TicketClass", "Class")
                        .WithMany("Tickets")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK__Ticket__ClassID__48CFD27E");

                    b.HasOne("FlightBookingWeb.Models.Account", "Customer")
                        .WithMany("Tickets")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Ticket__Customer__47DBAE45");

                    b.HasOne("FlightBookingWeb.Models.Flight", "Flight")
                        .WithMany("Tickets")
                        .HasForeignKey("FlightId")
                        .HasConstraintName("FK__Ticket__FlightID__46E78A0C");

                    b.HasOne("FlightBookingWeb.Models.Airport", "TransitAirport")
                        .WithMany("Tickets")
                        .HasForeignKey("TransitAirportId")
                        .HasConstraintName("FK__Ticket__TransitA__49C3F6B7");

                    b.Navigation("Class");

                    b.Navigation("Customer");

                    b.Navigation("Flight");

                    b.Navigation("TransitAirport");
                });

            modelBuilder.Entity("FlightBookingWeb.Models.Account", b =>
                {
                    b.Navigation("Baggages");

                    b.Navigation("Invoices");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("FlightBookingWeb.Models.Airplane", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("FlightBookingWeb.Models.Airport", b =>
                {
                    b.Navigation("FlightRouteArrivalAirports");

                    b.Navigation("FlightRouteDepartureAirports");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("FlightBookingWeb.Models.Flight", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("FlightBookingWeb.Models.FlightRoute", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("FlightBookingWeb.Models.Ticket", b =>
                {
                    b.Navigation("Baggages");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("FlightBookingWeb.Models.TicketClass", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
